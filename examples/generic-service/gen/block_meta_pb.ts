// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file block_meta.proto (package eth.block_meta.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message eth.block_meta.v1.BlockMeta
 */
export class BlockMeta extends Message<BlockMeta> {
  /**
   * @generated from field: uint64 number = 1;
   */
  number = protoInt64.zero;

  /**
   * @generated from field: bytes hash = 2;
   */
  hash = new Uint8Array(0);

  /**
   * @generated from field: bytes parent_hash = 3;
   */
  parentHash = new Uint8Array(0);

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 4;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<BlockMeta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eth.block_meta.v1.BlockMeta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "parent_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockMeta {
    return new BlockMeta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockMeta {
    return new BlockMeta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockMeta {
    return new BlockMeta().fromJsonString(jsonString, options);
  }

  static equals(a: BlockMeta | PlainMessage<BlockMeta> | undefined, b: BlockMeta | PlainMessage<BlockMeta> | undefined): boolean {
    return proto3.util.equals(BlockMeta, a, b);
  }
}

