// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: reader.proto

package pbreader

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EthClient is the client API for Eth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EthClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Eth_GetClient, error)
	GetMany(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (Eth_GetManyClient, error)
	Prefix(ctx context.Context, in *PrefixRequest, opts ...grpc.CallOption) (Eth_PrefixClient, error)
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (Eth_ScanClient, error)
}

type ethClient struct {
	cc grpc.ClientConnInterface
}

func NewEthClient(cc grpc.ClientConnInterface) EthClient {
	return &ethClient{cc}
}

func (c *ethClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Eth_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Eth_ServiceDesc.Streams[0], "/sf.reader.v1.Eth/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &ethGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Eth_GetClient interface {
	Recv() (*Tuple, error)
	grpc.ClientStream
}

type ethGetClient struct {
	grpc.ClientStream
}

func (x *ethGetClient) Recv() (*Tuple, error) {
	m := new(Tuple)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ethClient) GetMany(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (Eth_GetManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Eth_ServiceDesc.Streams[1], "/sf.reader.v1.Eth/GetMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &ethGetManyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Eth_GetManyClient interface {
	Recv() (*OptionalTuples, error)
	grpc.ClientStream
}

type ethGetManyClient struct {
	grpc.ClientStream
}

func (x *ethGetManyClient) Recv() (*OptionalTuples, error) {
	m := new(OptionalTuples)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ethClient) Prefix(ctx context.Context, in *PrefixRequest, opts ...grpc.CallOption) (Eth_PrefixClient, error) {
	stream, err := c.cc.NewStream(ctx, &Eth_ServiceDesc.Streams[2], "/sf.reader.v1.Eth/Prefix", opts...)
	if err != nil {
		return nil, err
	}
	x := &ethPrefixClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Eth_PrefixClient interface {
	Recv() (*Tuples, error)
	grpc.ClientStream
}

type ethPrefixClient struct {
	grpc.ClientStream
}

func (x *ethPrefixClient) Recv() (*Tuples, error) {
	m := new(Tuples)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ethClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (Eth_ScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &Eth_ServiceDesc.Streams[3], "/sf.reader.v1.Eth/Scan", opts...)
	if err != nil {
		return nil, err
	}
	x := &ethScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Eth_ScanClient interface {
	Recv() (*Tuples, error)
	grpc.ClientStream
}

type ethScanClient struct {
	grpc.ClientStream
}

func (x *ethScanClient) Recv() (*Tuples, error) {
	m := new(Tuples)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EthServer is the server API for Eth service.
// All implementations must embed UnimplementedEthServer
// for forward compatibility
type EthServer interface {
	Get(*GetRequest, Eth_GetServer) error
	GetMany(*GetManyRequest, Eth_GetManyServer) error
	Prefix(*PrefixRequest, Eth_PrefixServer) error
	Scan(*ScanRequest, Eth_ScanServer) error
	mustEmbedUnimplementedEthServer()
}

// UnimplementedEthServer must be embedded to have forward compatible implementations.
type UnimplementedEthServer struct {
}

func (UnimplementedEthServer) Get(*GetRequest, Eth_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEthServer) GetMany(*GetManyRequest, Eth_GetManyServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMany not implemented")
}
func (UnimplementedEthServer) Prefix(*PrefixRequest, Eth_PrefixServer) error {
	return status.Errorf(codes.Unimplemented, "method Prefix not implemented")
}
func (UnimplementedEthServer) Scan(*ScanRequest, Eth_ScanServer) error {
	return status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedEthServer) mustEmbedUnimplementedEthServer() {}

// UnsafeEthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EthServer will
// result in compilation errors.
type UnsafeEthServer interface {
	mustEmbedUnimplementedEthServer()
}

func RegisterEthServer(s grpc.ServiceRegistrar, srv EthServer) {
	s.RegisterService(&Eth_ServiceDesc, srv)
}

func _Eth_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EthServer).Get(m, &ethGetServer{stream})
}

type Eth_GetServer interface {
	Send(*Tuple) error
	grpc.ServerStream
}

type ethGetServer struct {
	grpc.ServerStream
}

func (x *ethGetServer) Send(m *Tuple) error {
	return x.ServerStream.SendMsg(m)
}

func _Eth_GetMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetManyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EthServer).GetMany(m, &ethGetManyServer{stream})
}

type Eth_GetManyServer interface {
	Send(*OptionalTuples) error
	grpc.ServerStream
}

type ethGetManyServer struct {
	grpc.ServerStream
}

func (x *ethGetManyServer) Send(m *OptionalTuples) error {
	return x.ServerStream.SendMsg(m)
}

func _Eth_Prefix_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrefixRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EthServer).Prefix(m, &ethPrefixServer{stream})
}

type Eth_PrefixServer interface {
	Send(*Tuples) error
	grpc.ServerStream
}

type ethPrefixServer struct {
	grpc.ServerStream
}

func (x *ethPrefixServer) Send(m *Tuples) error {
	return x.ServerStream.SendMsg(m)
}

func _Eth_Scan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EthServer).Scan(m, &ethScanServer{stream})
}

type Eth_ScanServer interface {
	Send(*Tuples) error
	grpc.ServerStream
}

type ethScanServer struct {
	grpc.ServerStream
}

func (x *ethScanServer) Send(m *Tuples) error {
	return x.ServerStream.SendMsg(m)
}

// Eth_ServiceDesc is the grpc.ServiceDesc for Eth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Eth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sf.reader.v1.Eth",
	HandlerType: (*EthServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Eth_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMany",
			Handler:       _Eth_GetMany_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Prefix",
			Handler:       _Eth_Prefix_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Scan",
			Handler:       _Eth_Scan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "reader.proto",
}
